package euler.problems

import euler.utils.Problem

/**
  * Problem 44
  *
  * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
  * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
  *
  * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
  *
  * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and
  * D = |Pk − Pj| is minimised; what is the value of D?
  */
object Problem44 extends Problem with App {
  def pentagonal(n: Int): Int = n * (3 * n - 1) / 2

  def pentagonals: Stream[Int] = Stream.from(1).map(pentagonal)

  def isPentagonal(n: Int): Boolean = {
    val num = Math.sqrt(1 + 24 * n)

    num == Math.floor(num) && num % 6 == 5
  }

  case class PentagonalPair(pj: Int, pks: Stream[Int])

  override def solution(): Any = pentagonals
    .map(pj => PentagonalPair(pj, pentagonals
      .takeWhile(pk => Math.abs(pk - pj) <= pj - 1)
      .map(pk => (pk, Math.abs(pk - pj)))
      .sortBy(_._2)
      .map(_._1)))
    .map(pps => pps.copy(pks = pps.pks.filter(pk => isPentagonal(pk + pps.pj) && isPentagonal(Math.abs(pk - pps.pj)))))
    .filterNot(_.pks.isEmpty)
    .map(pps => Math.abs(pps.pks.head - pps.pj))
    .head
}
