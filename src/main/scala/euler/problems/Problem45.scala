package euler.problems

import euler.utils.Problem

/**
  * Problem 45
  *
  * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
  * Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
  * Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
  * Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...
  *
  * It can be verified that T285 = P165 = H143 = 40755.
  *
  * Find the next triangle number that is also pentagonal and hexagonal.
  *
  */
object Problem45 extends Problem with App {

  private def isPentagonal(n: Long): Boolean = {
    val num = Math.sqrt(1 + 24 * n)

    num == Math.floor(num) && num % 6 == 5
  }

  private def isHexagonal(n: Long): Boolean = {
    val num = Math.sqrt(1 + 8 * n)

    num == Math.floor(num) && num % 4 == 3
  }

  private def triangle(n: Long): Long = n * (n + 1) / 2

  private def longStream(n: Long): Stream[Long] = n #:: longStream(n + 1)

  private def triangles: Stream[Long] = longStream(286L).map(triangle)

  override def solution(): Any = triangles.dropWhile(t => !isPentagonal(t) || !isHexagonal(t)).head
}
